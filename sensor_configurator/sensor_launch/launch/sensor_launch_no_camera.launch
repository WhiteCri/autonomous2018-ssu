<launch>
	<node pkg="platform_rx_thread_test" type="rx_thread_test" name="rx_thread_test" />
	<node pkg="teb_local_planner_tutorials" type="cmd_vel_to_ackermann_drive.py"
	 	name="cmd_vel_to_ackermann_drive"/>
	<node pkg="platform_tx" type="platform_tx" name="platform_tx" output="screen" args="/dev/ttyUSB0">
        <param name="angleToSerialValue" value="71.0"/>
        <param name="maxSteeringAngle" value="24.0"/>
        <param name="minSteeringAngle" value="-24.0"/>
        <param name="alignmentBias" value="-160"/>
        <!-- maxSpeed(m/s)-->
        <param name="maxSpeed" value="3"/>
        <!-- serial value = kph * 10-->
        <param name="m_s2serial" value="36"/>

        <param name="frequency" value="50"/>
        <param name="ackermann_topic_name" value="control/cmd_platform"/>
    </node>
    <node pkg="platform_controller" type="PlatformController_node" name="control" >
        <param name="/accel/settling_time" value="0.5"/>
        
        <param name="/brake/kp" value="33.0"/>
        <param name="/brake/ki" value="0.2"/>
        <param name="/brake/kd" value="0.0"/>

        <!--
            Steering Angle 제어 parameter: "/steer/*"
                - kp: 비례계수, ki: 적분계수, kd: 미분계수
                - 튜닝필요
        -->
        <param name="/steer/kp" value="1.0"/>    0.8  / 0.7  / 0.5
        <param name="/steer/ki" value="0.0"/>    10.0 / 1.0  / 1.0
        <param name="/steer/kd" value="0.0"/>    0.01 / 0.01 / 0.008
    </node>

  <!-->
  <node pkg="imu" type="imu_main" name="imu" args="/dev/ttyUSB1 10">
      <param name="angle_alignment" value="112"/>
      <param name="debugingFlag" value="true"/>
      <param name="imu_yaw_covariance" value="0.5"/>
  </node>

 <node pkg="nmea_navsat_driver" type="nmea_serial_driver" name="GPS_Sensor" args="/dev/ttyUSB2 38400"/>
 <node pkg="nmea_navsat_driver" type="GPS_Subscriber" name="GPS_Subscriber"/>
 <node pkg="gps_common" type="utm_odometry_node" name="Degree_To_UTM" />
 
 <param name="GPS_Odometry_initial" value="false"/>
 <-->
 	<arg name="host" default="192.168.0.204" />
 	<arg name="publish_min_range_as_inf" default="false" />
 	<node pkg="lms1xx" name="lms1xx" type="LMS1xx_node">
    		<param name="host" value="$(arg host)" />
    		<param name="publish_min_range_as_inf" value="$(arg publish_min_range_as_inf)" />
 	</node>
 	<node pkg="laser_filters" type="scan_to_scan_filter_chain" name="scan_to_scan_filter_chain">
    		<rosparam file="$(find laser_filters)/vail_obstacles.yaml" command="load"/>
 	</node>
	<node pkg="laser_filters" type="scan_to_scan_filter_chain" name="uturn_filter">
        <rosparam file="$(find laser_filters)/cfg/uturn_cut.yaml" command="load"/>  
		<remap from="/scan"  to="/uturn_scan"/>
	</node>
 	<node pkg="laser_filters" type="scan_to_scan_filter_chain" name="dynamic_filter">
        <rosparam file="$(find laser_filters)/cfg/dynamic_cut.yaml" command="load"/>  
		<remap from="/scan"  to="/dynamic_scan"/>
	</node>
  <include file="$(find obstacle_detector)/launch/nodes.launch" />
		
	<!--arg name="cam_num" default="1"/>	
	<arg name="frequency" default="30"/>
	<include file="$(find camera_image)/launch/camera_image.launch">
		<arg name="cam_num" value="$(arg cam_num)"/>
		<arg name="frequency" value="$(arg frequency)"/>
	</include> 
	<node name="lane_detection" pkg="lane_detection" type="lane_detection" respawn="true">
	</node>
	<node name="cal_distance" pkg="cal_distance" type="cal_distance" respawn="true">
	</node>
    	<node name="convert_cloud" pkg="convert_cloud" type="convert_cloud" respawn="true">
	</node>
	<include file="$(find pointcloud_to_laserscan)/launch/sample_node.launch">
		<arg name="cam_num" value="$(arg cam_num)"/>
	</include>
	<-->
</launch>
